@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@* @model IEnumerable<UserTicketConversation> *@
@model MH_TicketingSystem.Models.TicketDetailsViewModel;

@{
	Layout = "_HomeLayout";
	ViewData["Title"] = "Metro Health Ticketing System";
	string departmentTicket = TempData["DepartmentName"].ToString();
	string avatarLetter = departmentTicket.Substring(0, 2).ToUpper();
	var currentUser = await UserManager.GetUserAsync(User);
	var currentUserId = currentUser?.Id; // User's unique ID
	var currentUserName = currentUser?.UserName; // User's username

	// Random color in avatar
	string[] colors = [ "primary", "success", "danger", "warning", "info", "secondary", "black" ];
	Random random = new Random();
	int index = random.Next(colors.Length);
	string bg = "bg-" + colors[index];

}

<style>
	/*Message UI*/
	.chat-messages {
	display: flex;
	flex-direction: column;
	max-height: 600px;
	overflow-y: scroll
	}

	.chat-message-left,
	.chat-message-right {
	display: flex;
	flex-shrink: 0
	}

	.chat-message-left {
	margin-right: auto
	}

	.chat-message-right {
	flex-direction: row-reverse;
	margin-left: auto
	}

	.py-3 {
	padding-top: 1rem !important;
	padding-bottom: 1rem !important;
	}

	.px-4 {
	padding-right: 1.5rem !important;
	padding-left: 1.5rem !important;
	}

	.flex-grow-0 {
	flex-grow: 0 !important;
	}

	.border-top {
	border-top: 1px solid #dee2e6 !important;
	}
</style>

<div class="container">

	<div class="card my-3 shadow-sm">
		<div class="card-header d-flex justify-content-between align-items-center" id="headingOne"
			 data-bs-toggle="collapse" data-bs-target="#collapseOne"
			 aria-expanded="true" aria-controls="collapseOne">
			<span class="fw-bold fs-5">@Model.Ticket.Subject.ToUpper() #@Model.Ticket.TicketNumber</span>
			<span class="icon" style="cursor: pointer">
				<i class="bi" id="iconCollapseOne"></i>
			</span>
		</div>
		<div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
			<div class="card-body">
				<div class="mb-3 d-flex align-items-center">
					<h6 class="text-muted mb-0 fs-6"><strong>Description:</strong></h6>
					<p class="card-text fs-6 ms-2">@Model.Ticket.Description</p>
				</div>

				@if (User.IsInRole("Admin"))
				{
					<div class="mb-3 d-flex align-items-center">
						<h6 class="text-muted mb-0 fs-6"><strong>Ticket By:</strong></h6>
						<p class="card-text fs-6 ms-2">@departmentTicket : @Model.Ticket.TicketBy</p>
					</div>
				}

				@if (!string.IsNullOrEmpty(Model.Ticket.FilePath))
				{
					<div class="d-flex align-items-center border-top pt-3 m-0">
						<p class="mb-0 fs-6">
							<strong class="text-muted fs-6">Uploaded File:</strong> @Model.Ticket.FileName
						</p>
						<div class="m-2">
							<a href="@Url.Action("DownloadFile", "Ticket",
						new { filePath = Model.Ticket.FilePath, fileName = Model.Ticket.FileName })"
							   download class="btn btn-outline-primary btn-sm ml-1">
								<i class="bi bi-download"></i> Download
							</a>
						</div>
					</div>
				}
			</div>
		</div>
	</div>


	<div class="card">
		<div class="row g-0">
			<div class="col-12 ">
				<div class="py-2 px-4 border-bottom">
					<div class="d-flex align-items-center py-1">
						<div class="avatar">
							<span class="avatar-title rounded-circle border border-white @bg">@avatarLetter</span>
						</div>
						<div class="flex-grow-1 pl-3 ml-2 mt-2">
							<h3 class="fw-bold fs-5">@TempData["DepartmentName"]</h3>
						</div>
						<div class="dropdown d-inline-block">
							<div class="dropdown">
								<button class="btn btn-icon btn-clean"
										type="button"
										onclick="document.getElementById('menu-@Model.Ticket.TicketId').classList.toggle('show')">
									<i class="fas fa-ellipsis-h"></i>
								</button>
								<div id="menu-@Model.Ticket.TicketId" class="dropdown-menu">
									<a class="dropdown-item" href="@Url.Action("CloseTicket", "Home", new { id = Model.Ticket.TicketId })">Close</a>
									@if (User.IsInRole("Admin"))
									{
										<a class="dropdown-item" href="@Url.Action("PendingTicket", "Home", new { id = Model.Ticket.TicketId })">Pending</a>
									}
									<a class="dropdown-item" href="@Url.Action("ReOpenTicket", "Home", new { id = Model.Ticket.TicketId })">Re-Open</a>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="position-relative">
					<div class="chat-messages p-4" id="messagesList">
						@if(Model.TicketConversation != null){
							@foreach (var conversation in Model.TicketConversation)
							{
								// Check if the message is from the current user or someone else
								var isCurrentUser = conversation.UserId == currentUserId; // Assuming you have the current user's ID
								var user = conversation.UserId == currentUserId ? "You" : conversation.Username;
								<div class="@((isCurrentUser ? "chat-message-right" : "chat-message-left") + " pb-4")">
									<div>
										<div class="text-muted small text-nowrap mt-2">
											@conversation.Timestamp.ToString("hh:mm tt", System.Globalization.CultureInfo.InvariantCulture).ToUpper()
										</div>
									</div>
									<div class="flex-shrink-1 bg-light rounded py-2 px-3 @(isCurrentUser ? "mr-3" : "ml-3")">
										<div class="font-weight-bold mb-1">
											@user
										</div>
										@conversation.Message
										@if (!string.IsNullOrEmpty(conversation.FileName) && !string.IsNullOrEmpty(conversation.FilePath))
										{
											<div>
												<a href="@Url.Action("DownloadFile", "Ticket",
											new { filePath = conversation.FilePath, fileName = conversation.FileName })"
												   target="_blank">
													<i class="fas fa-arrow-circle-down"></i>
													@conversation.FileName
												</a>
											</div>
										}
									</div>
								</div>
							}
						}
				</div>

				<div class="flex-grow-0 py-3 px-4 border-top">
					<div class="form-group py-2">
						<label for="sendPhoto">Send Photo: </label>
						<input  id="file" type="file" class="form-control-file">
						<input id="ticketId" type="hidden" value="@Model.Ticket.TicketId"/>
					</div>
					<div class="input-group">
						<input type="text" class="form-control" placeholder="Type your message" id="messageInput">
						<button id="sendButton" class="btn btn-primary">Send</button>
					</div>
				</div>

			</div>
		</div>

	</div>
</div>

<!--   Core JS Files   -->
<script src="~/js/core/jquery-3.7.1.min.js"></script>
<script src="~/js/core/popper.min.js"></script>
<script src="~/js/core/bootstrap.min.js"></script>
<script src="~/vendor/toastr/js/toastr.min.js"></script>
<!-- Kaiadmin JS -->
<script src="~/js/kaiadmin.min.js" asp-append-version="true"></script>
<script src="~/js/dist/browser/signalr.js"></script>
<script src="~/js/dist/browser/signalr.min.js"></script>
<script src="~/js/chat.js"></script>

<script>
	const currentUser = {
		id: '@currentUserId',
		name: '@currentUserName'
	};

	document.addEventListener("DOMContentLoaded", () => {
		const header = document.querySelector("#headingOne");
		const icon = document.querySelector("#iconCollapseOne");

		// Set initial icon state
		if (header.getAttribute("aria-expanded") === "true") {
					icon.classList.add("icon-arrow-up");
		} else {
				icon.classList.add("icon-arrow-down");
		}

		// Add event listener for state change
		header.addEventListener("click", () => {
			const isExpanded = header.getAttribute("aria-expanded") === "true";

			if (isExpanded) {
					icon.classList.remove("icon-arrow-up");
					icon.classList.add("icon-arrow-down");
			} else {
					icon.classList.remove("icon-arrow-down");
					icon.classList.add("icon-arrow-up");
			}
		});
	});

</script>


