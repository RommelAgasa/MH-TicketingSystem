@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> UserManager
@model IEnumerable<MH_TicketingSystem.Models.TicketViewModel>

@{
    Layout = "_HomeLayout";
    ViewData["Title"] = "Metro Health Ticketing System";
}

<div class="container">
    <div class="row text-center p-4 justify-content-center">
        <div class="d-flex justify-content-center align-items-center" style="height: 60px;">
            <form class="navbar-left navbar-form nav-search me-2 w-75" asp-controller="Home" asp-action="Search" method="post">
                <div class="input-group shadow">
                    <input name="search" type="text" placeholder="Search Ticket ..." class="form-control" />
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-search">
                            <i class="fa fa-search search-icon"></i>
                        </button>
                    </div>
                </div>
            </form>
            @if (User.IsInRole("Employee")) // Display only in Employee
            {
                <a type="button" asp-controller="Home" asp-action="Create" class="btn btn-black ms-2">Add Ticket</a>
            }
        </div>
        <hr class="mt-3 mb-3" />
    </div>

    <div class="row row-demo-grid">
        <div class="col-12 col-md-8">
            <div class="card">
                <div class="card-header">
                    <div class="card-head-row">
                        @{
                            var ticketType = Context.Request.Query["ticketType"];
                            bool isAdmin = User.IsInRole("Admin") ? true : false;

                            string ticketView;
                            switch (ticketType)
                            {
                                case "closed":
                                    ticketView = isAdmin ? "Closed Tickets" : "My Closed Tickets";
                                    break;
                                case "open":
                                    ticketView = isAdmin ? "Open Tickets" : "My Open Tickets";
                                    break;
                                case "today":
                                    ticketView = "Today's Tickets";
                                    break;
                                case "pending":
                                    ticketView = isAdmin ? "Pending Tickets" : "My Pending Tickets";
                                    break;
                                case "all":
                                    ticketView = isAdmin ? "All Tickets" : "My Tickets";
                                    break;
                                default:
                                    ticketView = "Today's Tickets";
                                   break;
                            }
                        }
                        <div class="card-title">@ticketView</div>
                    </div>
                </div>
                <div class="card-body" id="tickets">
                    @foreach (var ticket in Model)
                    {
                        string truncatedDescription = ticket.Description.Length > 50
                        ? ticket.Description.Substring(0, 50) + "..."
                        : ticket.Description;
                        string pLevelColor = (ticket.TicketStatus == (int)TicketStatus.Closed) ? "success" : ticket.PriorityLevelColor;
                        string formattedDate = ticket.DateTicket.ToString("MMM dd, yyyy h:mm tt");
                        <div id="ticketContainer">
                            <div class="d-flex justify-content-between">
                                <a asp-controller="Home" asp-action="Details" asp-route-id="@ticket.TicketId">
                                    <div class="flex-1 ms-3 pt-1">
                                        <h6 class="text-uppercase fw-bold mb-1">
                                            <span style="color: #007bff; text-decoration: none; font-weight: bold;">
                                                @ticket.Subject.ToUpper()
                                            </span>
                                            <span class="text-@pLevelColor ps-3">@ticket.TicketStatusString</span>
                                        </h6>
                                        <span class="text-muted">
                                            @truncatedDescription
                                        </span>
                                        <br />
                                        <small class="text-muted mr-2">
                                            <i class="fa fa-calendar"></i> @ticket.DateTicket.ToString("dd MMM yyyy")
                                        </small>
                                        <small class="text-muted">
                                            <i class="fa fa-comments"></i> @ticket.TicketReplies replies
                                        </small>
                                        <small class="text-muted mr-2">
                                            <i class="icon-calendar"></i> SLA Deadline @(((DateTime)ticket.SLADeadline).ToString("dd MMM yyyy"))
                                        </small>
                                    </div>
                                </a>
                                <div class="float-end pt-1">
                                    <small class="text-muted me-1 d-inline-block">#@ticket.TicketNumber</small>
                                    <div class="dropdown d-inline-block">
                                        <div class="dropdown">
                                            <button class="btn btn-icon btn-clean"
                                                    type="button"
                                                    onclick="document.getElementById('menu-@ticket.TicketId').classList.toggle('show')">
                                                <i class="fas fa-ellipsis-h"></i>
                                            </button>
                                            <div id="menu-@ticket.TicketId" class="dropdown-menu">
                                                <a class="dropdown-item" href="@Url.Action("CloseTicket", "Home", new { id = ticket.TicketId })">Close</a>
                                                @if (User.IsInRole("Admin"))
                                                {
                                                    <a class="dropdown-item" href="@Url.Action("PendingTicket", "Home", new { id = ticket.TicketId })">Pending</a>
                                                }
                                                <a class="dropdown-item" href="@Url.Action("ReOpenTicket", "Home", new { id = ticket.TicketId })">Re-Open</a>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                            <div class="separator-dashed"></div>
                        </div>
                    }
                </div>
                <div class="p-3">
                    <nav aria-label="Ticket page navigation" style="display: @(Model.Count() <= 0? "none" : "block");">
                        <ul class="pagination">
                            <li class="page-item">
                                <a class="page-link" href="#" aria-label="Previous">
                                    <span aria-hidden="true">«</span>
                                    <span class="sr-only">Previous</span>
                                </a>
                            </li>
                            <li class="page-item">
                                <a class="page-link" href="#" aria-label="Next">
                                    <span aria-hidden="true">»</span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div> <!-- card -->
        </div>

        <div class="col-12 col-md-4 mt-1">
            <!-- Adjusted to be responsive -->
            <div class="card">
                <div class="card-header">
                    <strong>Views</strong>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        <a asp-controller="Home" asp-action="Index"
                           asp-route-ticketType="today">Today's Ticket</a>
                    </li>
                    <li class="list-group-item">
                        <a asp-controller="Home" asp-action="Index"
                           asp-route-ticketType="all">@(User.IsInRole("Admin") ? "All Tickets" : "My Tickets")</a>
                    </li>
                    <li class="list-group-item">
                        <a asp-controller="Home" asp-action="Index"
                           asp-route-ticketType="open">@(User.IsInRole("Admin") ? "Open Tickets" : "My Open Tickets")</a>
                    </li>
                    <li class="list-group-item">
                        <a asp-controller="Home" asp-action="Index"
                           asp-route-ticketType="pending">@(User.IsInRole("Admin") ? "Pending Tickets" : "My Pending Tickets")</a>
                    </li>
                    <li class="list-group-item">
                        <a asp-controller="Home" asp-action="Index"
                           asp-route-ticketType="closed">@(User.IsInRole("Admin") ? "Closed Tickets" : "My Closed Tickets")</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<!--   Core JS Files   -->
<script src="~/js/core/jquery-3.7.1.min.js"></script>
<script src="~/js/core/popper.min.js"></script>
<script src="~/js/core/bootstrap.min.js"></script>
<script src="~/vendor/toastr/js/toastr.min.js"></script>
<!-- Kaiadmin JS -->
<script src="~/js/kaiadmin.min.js" asp-append-version="true"></script>
<script src="~/js/ticket_pagination.js" asp-append-version="true"></script>
<script>
    $(function () {
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
                toastr.success('@TempData["SuccessMessage"]');
            </text>
        }
        else if (TempData["ErrorMessage"] != null)
        {
            <text>
                toastr.error('@TempData["ErrorMessage"]');
            </text>
        }
    });
</script>

<script src="~/js/dist/browser/signalr.js"></script>
<script src="~/js/dist/browser/signalr.min.js"></script>
@section Scripts {
    @if (User.IsInRole("Admin"))
    {
        <script>
            const connection = new signalR.HubConnectionBuilder()
            .withUrl("/dashboardHub")
            .build();

            connection.on("UpdateMetric", (metric, value) => {
                // Update the corresponding card dynamically
                if (metric === "totalTickets") {
                    document.querySelector("#totalTickets").textContent = value;
                } else if (metric === "newTickets") {
                    document.querySelector("#newTickets").textContent = value;
                } else if (metric === "openTickets") {
                    document.querySelector("#openTickets").textContent = value;
                } else if (metric === "closedTickets") {
                    document.querySelector("#closedTickets").textContent = value;
                }
            });

            connection.on("ReceiveNewTicket", (ticket, ticketStatus, priorityLevelColor) => {

                const truncatedDescription = ticket.description.length > 50
                    ? ticket.description.substring(0, 50) + "..."
                    : ticket.description;
                const formattedDate = new Date(ticket.dateTicket).toLocaleString("en-US", {
                    month: "short",
                    day: "numeric",
                    year: "numeric",
                    hour: "numeric",
                    minute: "numeric",
                });

                const ticketHtml = `
                    <div id="ticketContainer-${ticket.id}" class="bg-primary">
                        <div class="d-flex justify-content-between>
                            <a href="/Home/Details/${ticket.id}">
                                <div class="flex-1 ms-3 pt-1">
                                    <h6 id="ticketTitle" class="text-uppercase fw-bold mb-1">
                                        <span style="color: #007bff; text-decoration: none; font-weight: bold;">
                                            ${ticket.subject.toUpperCase()}
                                        </span>
                                        <span class="text-${priorityLevelColor} ps-3">${ticketStatus}</span>
                                    </h6>
                                    <span class="text-muted">
                                        ${truncatedDescription}
                                    </span>
                                    <br />
                                    <small class="text-muted mr-2">
                                        <i class="fa fa-calendar"></i> ${formattedDate}
                                    </small>
                                    <small class="text-muted">
                                        <i class="fa fa-comments"></i> 0 replies
                                    </small>
                                    <small class="text-muted mr-2">
                                        <i class="icon-calendar"></i> SLA Deadline ${new Date(ticket.slaDeadline).toLocaleDateString("en-US", {
                                            month: "short",
                                            day: "numeric",
                                            year: "numeric",
                                        })}
                                    </small>
                                </div>
                            </a>
                             <div class="float-end pt-1">
                                <small class="text-muted me-1 d-inline-block">#${ticket.ticketNumber}</small>
                                <div class="dropdown d-inline-block">
                                    <button class="btn btn-icon btn-clean"
                                            type="button"
                                            onclick="document.getElementById('menu-${ticket.id}').classList.toggle('show')">
                                        <i class="fas fa-ellipsis-h"></i>
                                    </button>
                                    <div id="menu-${ticket.id}" class="dropdown-menu">
                                        <a class="dropdown-item" href="/Home/CloseTicket/${ticket.id}">Close</a>
                                        <a class="dropdown-item" href="/Home/PendingTicket/${ticket.id}">Pending</a>
                                        <a class="dropdown-item" href="/Home/ReOpenTicket/${ticket.id}">Re-Open</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="separator-dashed"></div>
                    </div>
                `;

                const container = document.getElementById("tickets");
                container.insertAdjacentHTML("afterbegin", ticketHtml);

                const ticketElement = document.getElementById(`ticketContainer-${ticket.id}`);

                // Set a timeout to revert the styles
                setTimeout(() => {
                    ticketElement.classList.remove("bg-primary"); // Remove blue background
                }, 10000);

            });

            connection.start().catch(err => console.error(err));

            connection.onclose(async () => {
                console.log("Disconnected. Attempting to reconnect...");
                try {
                    await connection.start();
                    console.log("Reconnected successfully.");
                } catch (err) {
                    console.error("Failed to reconnect:", err);
                }
            });
        </script>
    }
}
